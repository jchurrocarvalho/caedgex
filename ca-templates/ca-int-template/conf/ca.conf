#
# OpenSSL intermediate CA configuration file.
#

########

[ default ]
caname              = THE_CA_INTERMEDIATE_NAME
HOME                = /usr/local/etc/pki/ca/ca/${caname}
homedata            = ${HOME}/data

dnsdomain           = dns.domain.com
basehostname        = pki-SOME_BASE_NAME_OR_NONE-${caname}

base_url            = http://${basehostname}.${dnsdomain}           # CA base URL
aia_url             = $base_url/ca_${caname}.cer                    # CA certificate URL
crl_url             = $base_url/ca_${caname}.crl                    # CRL distribution point
ocsp_url            = $base_url

# Use this in order to automatically load providers.
openssl_conf        = openssl_init

# Comment out the next line to ignore configuration errors
config_diagnostics  = 1

# Extra OBJECT IDENTIFIER info:
# oid_file           = $ENV::HOME/.oid
oid_section         = new_oids

# To use this configuration file with the "-extfile" option of the
# "openssl x509" utility, name here the section containing the
# X.509v3 extensions to use:
# extensions        =
# (Alternatively, use a configuration file that has only
# X.509v3 extensions in its main [= default] section.)

[ new_oids ]
# We can add new OIDs in here for use by 'ca', 'req' and 'ts'.
# Add a simple OID like this:
#testoid1            = 1.2.3.4
# Or use config file substitution like this:
#testoid2            = ${testoid1}.5.6

# Policies used by the TSA examples.
tsa_policy1         = 1.2.3.4.1
tsa_policy2         = 1.2.3.4.5.6
tsa_policy3         = 1.2.3.4.5.7

[ openssl_init ]
providers           = provider_sect
# Load default TLS policy configuration
ssl_conf            = ssl_module
alg_section         = evp_properties

[ evp_properties ]
#This section is intentionally added empty here
#to be tuned on particular systems

# Uncomment the sections that start with ## below to enable the legacy provider.
# Loading the legacy provider enables support for the following algorithms:
# Hashing Algorithms / Message Digests: MD2, MD4, MDC2, WHIRLPOOL, RIPEMD160
# Symmetric Ciphers: Blowfish, CAST, DES, IDEA, RC2, RC4,RC5, SEED
# Key Derivation Function (KDF): PBKDF1
# In general it is not recommended to use the above mentioned algorithms for
# security critical operations, as they are cryptographically weak or vulnerable
# to side-channel attacks and as such have been deprecated.

[ provider_sect ]
default             = default_sect
##legacy              = legacy_sect

##
[ default_sect ]
activate            = 1

##[ legacy_sect ]
##activate            = 1

#Place the third party provider configuration files into this folder
.include /etc/pki/tls/openssl.d

[ ssl_module ]

system_default      = crypto_policy

[ crypto_policy ]

.include = /etc/crypto-policies/back-ends/opensslcnf.config

########

[ ca ]
default_ca  = ca_${caname}

[ ca_hell-sub ]
# Directory and file locations.
dir                     = ${homedata}
certs                   = ${dir}/certs
crl_dir                 = ${dir}/crl
new_certs_dir           = ${dir}/newcerts
database                = ${dir}/ca.db
serial                  = ${dir}/serial

# The CA key and CA certificate.
private_key             = ${dir}/private/ca_${caname}.key
certificate             = ${dir}/certs/ca_${caname}.crt

# For certificate revocation lists.
crlnumber               = ${dir}/crlnumber
crl                     = ${dir}/crl/ca_${caname}_crl.pem
crl_extensions          = crl_ext
default_crl_days        = 30

# SHA-1 is deprecated, so use SHA-2 instead.
default_md              = sha256

name_opt                = ca_default
cert_opt                = ca_default
default_days            = 1460
preserve                = no
email_in_dn             = no
unique_subject          = no
rand_serial             = yes

copy_extensions         = copy
# If it is pretended to build a CA hierarchy and extensions should be applied in diferent levels
# when certificates requested are submitted
x509_extensions         = int_ca_issuer_ext

policy                  = policy_int_ca

# policies

[ policy_root_ca ]
countryName             = match
stateOrProvinceName     = match
localityName            = optional
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ policy_int_ca ]
countryName             = supplied
stateOrProvinceName     = supplied
localityName            = optional
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ policy_any ]
countryName             = supplied
stateOrProvinceName     = supplied
localityName            = optional
organizationName        = supplied
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ policy_default ]
countryName             = match
stateOrProvinceName     = supplied
localityName            = optional
organizationName        = supplied
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ policy_strict ]
# The root CA should only sign intermediate certificates that match.
# See the POLICY FORMAT section of `man ca`.
countryName             = match
stateOrProvinceName     = match
localityName            = optional
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ policy_loose ]
# Allow the intermediate CA to sign a more diverse range of certificates.
# See the POLICY FORMAT section of the `ca` man page.
countryName             = supplied
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

# req

[ req ]
# Options for the `req` tool (`man req`).
default_bits                    = 4096
distinguished_name              = req_distinguished_name
string_mask                     = utf8only
default_md                      = sha256
#req_extensions                  = req_ca_ext
x509_extensions                 = req_ca_ext

#encrypt_key                     = yes           # Protect private key
#utf8                            = yes           # Input is UTF-8
#prompt                          = no

[ req_ca ]
default_bits                    = 4096
distinguished_name              = req_ca_distinguished_name
string_mask                     = utf8only
default_md                      = sha256
x509_extensions                 = req_ca_ext

[ req_client ]
default_bits                    = 4096
distinguished_name              = req_client_distinguished_name
string_mask                     = utf8only
default_md                      = sha256
x509_extensions                 = server_cert_ext

[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
countryName                     = Country Name (2 letter code)
countryName_default             = PT
stateOrProvinceName             = State or Province Name
stateOrProvinceName_default     = Lisbon
localityName                    = Locality Name
localityName_default            = Lisbon
0.organizationName              = Organization Name
0.organizationName_default      = IT
organizationalUnitName          = Organizational Unit Name
organizationalUnitName_default  = "IT hell-sub blue team"
commonName                      = Common Name
#commonName_default              = "CA intermediate"
emailAddress                    = Email Address
emailAddress_default            = "myname@domain.com"

[ req_ca_distinguished_name ]
countryName                     = Country Name (2 letter code)
countryName_default             = PT
stateOrProvinceName             = State or Province Name
stateOrProvinceName_default     = Lisbon
localityName                    = Locality Name
localityName_default            = Lisbon
0.organizationName              = Organization Name
0.organizationName_default      = IT
organizationalUnitName          = Organizational Unit Name
organizationalUnitName_default  = "IT hell-sub blue team"
commonName                      = Common Name
commonName_default              = "CA hell-sub (heaven)"
emailAddress                    = Email Address
emailAddress_default            = "myname@domain.com"

[ req_client_distinguished_name ]
countryName                     = Country Name (2 letter code)
countryName_default             = PT
stateOrProvinceName             = State or Province Name
stateOrProvinceName_default     = Lisbon
localityName                    = Locality Name
localityName_default            = Lisbon
0.organizationName              = Organization Name
0.organizationName_default      = IT
organizationalUnitName          = Organizational Unit Name
organizationalUnitName_default  = "IT hell-sub blue team"
commonName                      = Common Name
#commonName_default              = ""
emailAddress                    = Email Address
emailAddress_default            = "myname@domain.com"

# subject alt names

[ ca_alt_names ]
DNS.1   = ${basehostname}.${dnsdomain}
DNS.2   = ${basehostname}-2.${dnsdomain}
DNS.3   = ${basehostname}-3.${dnsdomain}

[ req_ca_alt_names ]
DNS.1   = ${basehostname}.${dnsdomain}
DNS.2   = ${basehostname}-2.${dnsdomain}
DNS.3   = ${basehostname}-3.${dnsdomain}
email   = move

# req extensions

[ req_ca_ext ]
subjectKeyIdentifier            = hash
basicConstraints                = critical, CA:true
keyUsage                        = critical, digitalSignature, cRLSign, keyCertSign
subjectAltName                  = @req_ca_alt_names

[ req_ca_issuer_ext ]
subjectKeyIdentifier            = hash
basicConstraints                = critical, CA:true, pathlen:0
keyUsage                        = critical, digitalSignature, cRLSign, keyCertSign
subjectAltName                  = @req_ca_alt_names

[ req_client_ext ]
# leave this empty! Useful when creating request and using -extensions cli option

# extensions

[ root_ca_ext ]
# Extensions for a typical CA (`man x509v3_config`).
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid:always, issuer:always
basicConstraints                = critical, CA:true
keyUsage                        = critical, digitalSignature, cRLSign, keyCertSign
subjectAltName                  = @ca_alt_names

[ ca_ext ]
# Extensions for a typical CA (`man x509v3_config`).
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid:always, issuer:always
basicConstraints                = critical, CA:true
keyUsage                        = critical, digitalSignature, cRLSign, keyCertSign

[ int_ca_ext ]
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid:always, issuer:always
authorityInfoAccess             = @issuer_info
crlDistributionPoints           = @crl_info
basicConstraints                = critical, CA:true
keyUsage                        = critical, digitalSignature, cRLSign, keyCertSign
#certificatePolicies             = certHighAssurance, certMediumAssurance, certTimeStamping

[ int_ca_issuer_ext ]
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid:always, issuer:always
authorityInfoAccess             = @issuer_info
crlDistributionPoints           = @crl_info
basicConstraints                = critical, CA:true, pathlen:0
keyUsage                        = critical, digitalSignature, cRLSign, keyCertSign
#certificatePolicies             = certHighAssurance, certMediumAssurance, certTimeStamping

[ identity_cert_ext ]
basicConstraints                = CA:false
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid, issuer:always
keyUsage                        = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage                = clientAuth, emailProtection, msSmartcardLogin
# This is required for TSA certificates.
#extendedKeyUsage                = timeStamping
nsCertType                      = client, email

[ codesign_cert_ext ]
basicConstraints                = CA:false
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid, issuer:always
keyUsage                        = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage                = emailProtection, codeSigning
# This is required for TSA certificates.
#extendedKeyUsage                = timeStamping

[ vpn_client_cert_ext ]
basicConstraints                = CA:false
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid:always, issuer:always
keyUsage                        = critical, digitalSignature, keyEncipherment
extendedKeyUsage                = clientAuth

[ server_client_cert_ext ]
basicConstraints                = CA:false
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid, issuer:always
keyUsage                        = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage                = serverAuth, clientAuth
#subjectAltName                  = @alt_names
nsCertType                      = server, client

[ server_cert_ext ]
basicConstraints                = CA:false
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid, issuer:always
keyUsage                        = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage                = serverAuth
#subjectAltName                  = @alt_names
nsCertType                      = server

[ timestamp_cert_ext ]
basicConstraints                = CA:false
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid, issuer:always
authorityInfoAccess             = @ocsp_info
crlDistributionPoints           = @crl_info
keyUsage                        = critical, nonRepudiation, digitalSignature
extendedKeyUsage                = timeStamping
#certificatePolicies             = certTimeStamping

[ ocspsign_ext ]
basicConstraints                = CA:false
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid:always
authorityInfoAccess             = @issuer_info
keyUsage                        = critical, digitalSignature
extendedKeyUsage                = OCSPSigning
noCheck                         = true

[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier          = keyid:always

[ ocsp_ext ]
# Extension for OCSP signing certificates (`man ocsp`).
basicConstraints                = CA:false
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid, issuer
keyUsage                        = critical, digitalSignature
extendedKeyUsage                = critical, OCSPSigning

#

[ tsa ]

default_tsa = tsa_config        # the default TSA section

[ tsa_config ]

# These are used by the TSA reply generation only.
dir                     = ${homedata}                                   # TSA root directory
serial                  = ${dir}/tsaserial                              # The current serial number (mandatory)
crypto_device           = builtin                                       # OpenSSL engine to use for signing
signer_cert	            = ${dir}/tsacert.pem 	                        # The TSA signing certificate (optional)
certs                   = ${dir}/certs/ca_${caname}_chain_crt.pem       # Certificate chain to include in reply (optional)
signer_key              = ${dir}/private/tsakey.pem                     # The TSA private key (optional)
signer_digest           = sha256                                        # Signing digest to use. (Optional)
default_policy          = tsa_policy1                                   # Policy if request did not specify it (optional)
other_policies          = tsa_policy2, tsa_policy3                      # acceptable policies (optional)
digests                 = sha256, sha384, sha512                        # Acceptable message digests (mandatory)
accuracy                = secs:1, millisecs:500, microsecs:100          # (optional)
clock_precision_digits  = 0                                             # number of digits after dot. (optional)
ordering                = yes	                                        # Is ordering defined for timestamps? (optional, default: no)
tsa_name                = yes                                           # Must the TSA name be included in the reply? # (optional, default: no)
ess_cert_id_chain	    = no                                            # Must the ESS cert id chain be included? (optional, default: no)
ess_cert_id_alg         = sha256                                        # algorithm to compute certificate identifier (optional, default: sha256)

[ issuer_info ]
caIssuers;URI.0         = ${aia_url}

[ crl_info ]
URI.0                   = ${crl_url}

[ ocsp_info ]
caIssuers;URI.0         = $aia_url
OCSP;URI.0              = $ocsp_url

[ additional_oids ]
certHighAssurance       = Cert High Assurance, 1.3.6.1.4.1.0.1.7.10
certMediumAssurance     = Cert Medium Assurance, 1.3.6.1.4.1.0.1.7.8
certTimeStamping        = Cert Time Stamping, 1.3.6.1.4.1.0.1.8.2

